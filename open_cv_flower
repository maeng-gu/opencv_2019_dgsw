#include "opencv2/opencv.hpp"
#include <iostream>
#include <DirectXMath.h>
#include <stdlib.h>
#include <ppl.h>


using namespace cv;
using namespace std;

void main()
{
	VideoCapture cap(0);
	Mat frame, edited, editedR, editedG, editedB;

	assert(cap.isOpened());

	cout << cvRound(cap.get(CAP_PROP_FRAME_WIDTH)) << " x " << cvRound(cap.get(CAP_PROP_FRAME_HEIGHT)) << endl;


	int width = cap.get(CAP_PROP_FRAME_WIDTH);
	int height = cap.get(CAP_PROP_FRAME_HEIGHT);
	double fps = cap.get(CAP_PROP_FPS);

	int fourcc = VideoWriter::fourcc('D', 'I', 'V', 'X');
	int delay = cvRound(1000 / fps);
	VideoWriter output0("00.avi", fourcc, fps, Size(width, height));
	edited = Mat(width, height, CV_8UC3);

	while (true) {
		cap >> frame;

		if (frame.empty()) break;

		line(frame, Point(120, 480), Point(120, 270), Scalar(255, 255, 0));


		ellipse(frame, Point(100, 470), Size(70, 20), 30,  0, 360, Scalar(255,255,0), FILLED);
		ellipse(frame, Point(120, 470), Size(70, 20), -30, 0, 360, Scalar(255, 255, 0), FILLED);

		ellipse(frame, Point(120, 300), Size(70, 20), 0, 0, 360, Scalar(255, 255, 0), FILLED);
		ellipse(frame, Point(120, 300), Size(70, 20), -90, 0, 360, Scalar(255, 255, 0), FILLED);
		ellipse(frame, Point(120, 300), Size(70, 20), 60, 0, 360, Scalar(255, 255, 0), FILLED);
		ellipse(frame, Point(120, 300), Size(70, 20), -60, 0, 360, Scalar(255, 255, 0), FILLED);


		circle(frame, Point(120, 300), 30, Scalar(255, 255, 255), FILLED, LINE_AA);

	//axes: 타원의 반지름 Size(x축 반지름, y축 반지름)
		//angle : 타원 회전 각도 x축 기준 시계방향

		concurrency::parallel_for(
			0, frame.cols, [&](int x) {
			for (int y = 0; y < frame.rows; ++y)
			{
				auto org = frame.at<Vec3b>(y, x);

				edited.at<Vec3b>(x, y) = org;
			}
		}
		);

		output0 << edited.t();
		imshow("1", edited.t());

		int get = waitKey(1);
		if (get == 27) break;
	}
}
